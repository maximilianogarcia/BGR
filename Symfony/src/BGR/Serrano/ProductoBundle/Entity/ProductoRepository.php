<?php

namespace BGR\Serrano\ProductoBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * ProductoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductoRepository extends EntityRepository
{

	public function save(Producto $producto)
    {   
        $em = $this->getEntityManager();
	    $producto->setCategoria($em->merge($producto->getCategoria()));
	    
	    $umTemporales = new ArrayCollection();
	    $prtemporales = new ArrayCollection();
	     
	    foreach($producto->getUnidadDeMedidas() as $unidadMedida){
				$umTemporales->add($em->merge($unidadMedida));
        }

        foreach($producto->getProveedores() as $proveedor){
        	$prtemporales->add($em->merge($proveedor));
        }
        
        $producto->setUnidadDeMedidas($umTemporales);
        $producto->setProveedores($prtemporales);
        
        $em->persist($producto);
        $em->flush();
    }

	public function update($producto)
    {   
		  //TODO: persistir el manyToMany, por ahora se hace atraves de 
		  // mapear la tabla intermedia.
 		  
 		  $em = $this->getEntityManager();	         
		  $em->persist($em->merge($producto));
        $em->flush();
    }

    public function delete($producto)
    {   
        $em = $this->getEntityManager();
        $em->remove($em->merge($producto));
        $em->flush();
    }
    public function findByCategoria($categoria)
    {
        $em = $this->getEntityManager();
        $result = $em->createQuery("SELECT l FROM BGRSerranoProductoBundle:Producto l   
            WHERE l.categoria = :categoria"
        )->setParameter('categoria', $categoria)->getArrayResult();
    
        return $result;
    }
    
    public function findRemanente($productoId)
    {
	$em = $this->getEntityManager();
    	 
    	$rsm = new ResultSetMapping();
    	

    	$rsm->addScalarResult('remanente_id', 'remanente_id');
    	$rsm->addScalarResult('cantidad', 'cantidad');
    	$rsm->addScalarResult('producto_name', 'producto_name');
    	$rsm->addScalarResult('producto_id', 'producto_id');
    	 
    	 
    
    	$query = $em->createNativeQuery('
		  SELECT  
    			r.id as remanente_id,
				r.cantidad as cantidad,
    			p.name as producto_name,
    			p.id as producto_id
    			
          FROM Producto p
    	  JOIN Remanente r ON(r.producto_id = p.id)		
		  WHERE  p.id = ? 
          ',$rsm)->setParameter(1,$productoId);
    
    	$result = $query->getResult(); 
    	return $result;
    }
    public function getAllRemanentes()
    {
    	$em = $this->getEntityManager();
    
    	$rsm = new ResultSetMapping();
    	 
    
    	$rsm->addScalarResult('remanente_id', 'remanente_id');
    	$rsm->addScalarResult('cantidad', 'cantidad');
    	$rsm->addScalarResult('producto_name', 'producto_name');
    	$rsm->addScalarResult('producto_id', 'producto_id');
    
    
    
    	$query = $em->createNativeQuery('
		  SELECT
    			r.id as remanente_id,
				r.cantidad as cantidad,
    			p.name as producto_name,
    			p.id as producto_id
    
          FROM Producto p
    	  JOIN Remanente r ON(r.producto_id = p.id)
          ',$rsm);
    
    	$result = $query->getResult();
    	return $result;
    }  
}
